<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context   
    	http://www.springframework.org/schema/context/spring-context-3.2.xsd      
	    http://www.springframework.org/schema/jms 
	    http://www.springframework.org/schema/jms/spring-jms-3.2.xsd
        ">

	<!-- 通用模块 start -->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<bean id="targetConnectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
		<!-- TCP异步传输 -->
		<property name="brokerURL" value="tcp://localhost:61616?jms.useAsyncSend=true" />
	</bean>

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory 分2两种工厂 org.springframework.jms.connection.SingleConnectionFactory:建立JMS服务器链接的请求会一直返回同一个链接，并且会忽略Connection的close方法调用; 
		org.springframework.jms.connection.CachingConnectionFactory:继承了SingleConnectionFactory，所以它拥有SingleConnectionFactory的所有功能，同时它还新增了缓存功能，它可以缓存Session、MessageProducer和MessageConsumer -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="targetConnectionFactory" />
	</bean>

	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 链接工长 -->
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 发送模式 DeliveryMode.NON_PERSISTENT=1:非持久 -->
		<!-- DeliveryMode.PERSISTENT=2:持久 -->
		<property name="deliveryMode" value="1" />
	</bean>
	<!-- 通用模块 end -->
	
	<!--这个是主题目的地，一对多的 -->
	<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="topic" />
	</bean>
	
	
	
	<!-- 简单队列测试 start -->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<!-- 通过 构造 设定 队列的名字 -->
		<!-- <constructor-arg index="0" value="orderQueue"/> -->
		<constructor-arg value="queue" />
	</bean>
	
	<!-- 消息监听器 -->
	<bean id="consumerMessageListener" class="com.hwm.activemq.listener.CusumerMessageListener" />
	
	<!-- 消息监听容器 :
		在配置一个MessageListenerContainer的时候有三个属性必须指定，
		一个是表示从哪里监听的ConnectionFactory；
		一个是表示监听什么的Destination；
		一个是接收到消息以后进行消息处理的MessageListener。
	-->
	<bean id="jmsContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="messageListener" ref="consumerMessageListener" />
		
		<!-- 以下配置可以通用在每个容器中 -->
		<!-- 是否开启事务处理-->  
		<property name="sessionTransacted" value="false"></property>  
	    <!-- 设置固定的线程数 -->  
	    <property name="concurrentConsumers" value="6"></property>  
	    <!-- 设置动态的线程数 -->  
	    <property name="concurrency" value="2-9"></property>  
	    <!-- 设置最大的线程数 -->  
	    <property name="maxConcurrentConsumers" value="15"></property>  
	</bean>
	<!-- 简单队列测试 end -->
	
	
	<!-- sessionAwareQueue队列测试 start -->
	<!--这个是sessionAwareQueue目的地 -->
	<bean id="sessionAwareQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>sessionAwareQueue</value>
		</constructor-arg>
	</bean>
	<!-- 监听器 -->
	<bean id="consumerSessionAwareMessageListener"
		class="com.hwm.activemq.listener.ConsumerSessionAwareMessageListener">
		<property name="destination" ref="queueDestination"></property>
	</bean>
	
	<!-- 监听容器 -->
	<bean id="sessionAwareListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="sessionAwareQueue" />
		<property name="messageListener" ref="consumerSessionAwareMessageListener" />
	</bean>
	<!-- sessionAwareQueue队列测试 ends -->
	
	<!-- adapterQueue队列测试 start -->
	<!--这个是adapterQueue目的地 -->
	<bean id="adapterQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>adapterQueue</value>
		</constructor-arg>
	</bean>
	<!-- 监听器类型 -->
	<!--方法一： 消息监听适配器 MessageListenerAdapter -->
	<!-- <bean id="messageListenerAdapter"
		class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<constructor-arg>
			<bean class="com.hwm.activemq.listener.ConsumerListenerAdapter" />
		</constructor-arg>
	</bean> -->
	<!--方法二： 消息监听适配器 MessageListenerAdapter -->
	 <!-- <bean id="messageListenerAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">  
        <property name="delegate">  
            <bean class="com.hwm.activemq.listener.ConsumerListenerAdapter"/>  
        </property>  
        <property name="defaultListenerMethod" value="receiveMessage"/>  
    </bean> -->
    <!-- 消息容器 -->
    <bean id="messageListenerAdapterContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="adapterQueue" />
		<property name="messageListener" ref="messageListenerAdapter" />
	</bean>
	<!-- sessionAwareQueue队列测试 ends -->
	
	


	
	<!-- 方法一：使用setJMSReplyTo，处理messageListenerAdapter的回复消息 start -->
	<!-- responseQueue 用于测试消息回复的 -->  
	<bean id="responseQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>responseQueue</value>
		</constructor-arg>
	</bean>
	<!-- responseQueue 对应的消息监听器 -->  
	<bean id="responseQueueListener" class="com.hwm.activemq.listener.ResponseQueueListener"/>
	<!-- responseQueue 消息监听容器 -->  
	<bean id="responseQueueListenerContainer" 
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory"/>
		<property name="destination" ref="responseQueue"/>
		<property name="messageListener" ref="responseQueueListener"></property>
	</bean>
	<!-- end -->
	
	
	<!-- 方法二：通过MessageListenerAdapter的defaultResponseDestination属性来指定 -->
	<!-- 设置队列 -->
	<bean id="defaultResponseQueue" class="org.apache.activemq.command.ActiveMQQueue">  
	    <constructor-arg>  
	        <value>defaultResponseQueue</value>  
	    </constructor-arg>  
	</bean>  
    <!-- defaultResponseQueue对应的监听器 -->  
	<bean id="defaultResponseQueueListener" class="com.hwm.activemq.listener.DefaultResponseQueueListener"/>  
  
  	<!-- defaultResponseQueue对应的监听容器 -->  
	<bean id="defaultResponseQueueMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
	    <property name="connectionFactory" ref="connectionFactory"/>  
	    <property name="destination" ref="defaultResponseQueue"/>  
	    <property name="messageListener" ref="defaultResponseQueueListener"/>  
	</bean> 
	
	<!-- 修改消息监听适配器 MessageListenerAdapter 添加属性defaultResponseDestination-->
	 <bean id="messageListenerAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">  
        <property name="delegate">  
            <bean class="com.hwm.activemq.listener.ConsumerListenerAdapter"/>  
        </property>  
        <property name="defaultListenerMethod" value="receiveMessage"/> 
        <property name="defaultResponseDestination" ref="defaultResponseQueue"></property> 
    </bean> 
</beans>  